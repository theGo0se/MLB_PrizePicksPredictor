import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import time

# File paths for hitting and pitching CSV files
hitting_file_path = r"C:\Users\11487\OneDrive\Documents\Python\Prize Picks Project\MLB\mlb_cs_hitting.csv"
pitching_file_path = r"C:\Users\11487\OneDrive\Documents\Python\Prize Picks Project\MLB\mlb_cs_pitching.csv"

# Read the CSV file and get the player names
def read_player_names(csv_file, column_name):
    df = pd.read_csv(csv_file)
    player_names = df[column_name].dropna().tolist()  # Drop empty values
    return player_names

# Set up Selenium WebDriver
def setup_driver():
    options = webdriver.ChromeOptions()
    options.add_argument("--start-maximized")
    return webdriver.Chrome(options=options)

# Search for a player's stats on the MLB page
def search_player_stats(driver, player_name):
    try:
        # Open the MLB stats page
        driver.get("https://www.mlb.com/stats/all-time-totals")
        time.sleep(5)  # Wait for the page to load

        # Locate the search bar (adjust the selector based on the actual page structure)
        search_bar = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//input[@placeholder='Search Players']"))
        )
        search_bar.clear()
        search_bar.send_keys(player_name)
        search_bar.send_keys(Keys.RETURN)
        time.sleep(5)  # Wait for search results to load

        # Scrape the player's stats (adjust this based on the actual page structure)
        soup = BeautifulSoup(driver.page_source, 'html.parser')
        stats_table = soup.find('table', class_='stats-table')  # Adjust class if necessary
        if stats_table:
            rows = stats_table.find('tbody').find_all('tr')  # Get all rows in the table
            player_stats = []
            for row in rows:
                cols = [col.text.strip() for col in row.find_all('td')]
                player_stats.append(cols)
            return player_stats
        else:
            print(f"No stats found for {player_name}.")
            return None
    except Exception as e:
        print(f"Error searching stats for {player_name}: {e}")
        return None

# Save the results to a CSV file
def save_stats_to_csv(player_stats_dict, output_file):
    # Convert the dictionary to a DataFrame
    all_stats = []
    for player, stats in player_stats_dict.items():
        if stats:
            for stat_row in stats:
                row = [player] + stat_row
                all_stats.append(row)

    # Create DataFrame and save to CSV
    df = pd.DataFrame(all_stats)
    df.to_csv(output_file, index=False, header=False)
    print(f"Saved stats to {output_file}")

# Main function
def main():
    # Column name in the input CSV containing player names
    column_name = 'Player'

    # Read player names from the hitting CSV file
    print("Reading player names from hitting CSV...")
    hitting_players = read_player_names(hitting_file_path, column_name)

    # Read player names from the pitching CSV file
    print("Reading player names from pitching CSV...")
    pitching_players = read_player_names(pitching_file_path, column_name)

    # Combine all unique player names
    all_players = list(set(hitting_players + pitching_players))
    print(f"Total unique players to search: {len(all_players)}")

    # Set up WebDriver
    driver = setup_driver()

    try:
        # Dictionary to store player stats
        player_stats_dict = {}

        # Search and scrape stats for each player
        for player_name in all_players:
            print(f"Searching stats for {player_name}...")
            stats = search_player_stats(driver, player_name)
            player_stats_dict[player_name] = stats

        # Save all stats to a CSV file
        output_file = r"C:\Users\11487\OneDrive\Documents\Python\Prize Picks Project\MLB\career_stats.csv"
        save_stats_to_csv(player_stats_dict, output_file)

    finally:
        # Quit the WebDriver
        driver.quit()

if __name__ == "__main__":
    main()
